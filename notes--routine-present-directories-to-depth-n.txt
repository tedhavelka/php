//
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
//
// Algorithm, first draft:
//
//  *  assume no order of files, not by file type and not alphabetic by filename,
//  *  start at path depth zero with respect to base directory of given file tree,
//  - loop -
//     Display option 1:  show dirs of current dir first, dirs fully expanded
//     *  show present dir and mark dir shown,
//     *  iterate over file tree hash and . . . hey, regular files of first dir may be shown far away from the dir itself in this schema! - TMH
//
//  But hey, this will only happen when more-parent level directories
//  when those dirs contain both files and directories.  When only the
//  most-child level dirs contain files then the presentation is the
//  same regardless of whether our algorithm shows dirs or files first.
//
//     Display option 2:  show files of current dir first, dirs fully expanded
//
//     *  keep track whether we've shown all directories
//
//
//
//  Two ways of showing file tree hierarchy:
//
//  "files before dirs"                "dirs before files"
//  highlights dir contents            highlights directory structure
//
//  base_dir                        :   base_dir
//    |                             :     |
//    + file                        :     + dir_1
//    + file                        :     |   |
//    + dir_1                       :     |   + dir_4
//    |   |                         :     |   |   |
//    |   + file                    :     |   |   + file
//    |   + file                    :     |   |   + file
//    |   + dir_4                   :     |   |   + file
//    |       |                     :     |   |
//    |       + file                :     |   + file
//    |       + file                :     |   + file
//    |       + file                :     |
//    |                             :     + dir_2
//    + dir_2                       :     |   |
//    |   |                         :     |   + file
//    |   + file                    :     |
//    |                             :     + dir_3
//    + dir_3                       :     |   |
//        |                         :     |   + file
//        + file                    :     |
//                                  :     + file
//                                  :     + file
//
//
//  and with files shown first, how can we describe this presentation
//  file by file, implemented in non-recursive code?
//
//  dir_a   script sees dirs in order a, b, d, e, c
//    |
//    + dir_b
//    |   |
//    |   + dir_c
//    |   |   |
//    |   |   + file
//    |   |   + file
//    |   |   + file
//    |   |
//    |   + file
//    |   + file
//    |
//    + dir_d
//    |   |
//    |   + file
//    |
//    + dir_e
//    |   |
//    |   + file
//    |
//    + file
//    + file
//
//  Algorithm . . .
//    *  show first directory not yet shown,  <-- first in file tree hash?  That's not algorithmically correct!
//       +  note key of or pointer to latest dir shown
//       +  create serialized presentation of file tree "branch" characters, here pipe chars and plus characters
//       +  store serialized presentation of file tree "branch"
//
//    *  present zero or more files when latest dir has no more dirs to present
//
//
//
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
//



2018-03-26 SUN

0 => b-directory-empty, parent entry -1
1 => dir-a, parent entry -1
2 => dir-b, parent entry -1
3 => dir-c, parent entry -1
4 => file-1.txt, parent entry -1
5 => file-2.txt, parent entry -1
6 => dir-a-1, parent entry 1
7 => file-2.txt, parent entry 1
8 => file-1.txt, parent entry 1
9 => d.txt, parent entry 3
10 => e.txt, parent entry 3
11 => f.txt, parent entry 3
12 => jale.txt, parent entry 6
13 => jiya.txt, parent entry 6
14 => dir-a-2, parent entry 6
15 => des.txt, parent entry 14
16 => ye.txt, parent entry 14
17 => jo.txt, parent entry 14


With notes . . .

0 => b-directory-empty, parent entry -1
1 => dir-a, parent entry -1
2 => dir-b, parent entry -1
3 => dir-c, parent entry -1
4 => file-1.txt, parent entry -1  <-+
5 => file-2.txt, parent entry -1  <-+-- want to show these files last
6 => dir-a-1, parent entry 1      . . . subdirectory 1, parent entry changes
7 => file-2.txt, parent entry 1
8 => file-1.txt, parent entry 1
9 => d.txt, parent entry 3        . . . subdirectory 2, parent entry changes
10 => e.txt, parent entry 3
11 => f.txt, parent entry 3
12 => jale.txt, parent entry 6    . . . subdirectory 3, parent entry changes but we can't tell so from this sequence (1)
13 => jiya.txt, parent entry 6
14 => dir-a-2, parent entry 6
15 => des.txt, parent entry 14
16 => ye.txt, parent entry 14
17 => jo.txt, parent entry 14


(1)  Sometimes per our observations running this PHP code, regular files appear to the script before directory type files.  The parent hash entry always increases, and files of a given directory are always neighbors in the series, but we need an efficient sub-search per each group of files in a given directory, to catch and display all first directories -- more specifically first not-yet-shown directories -- before showing files of one or another already shown directory.

Our last sentence is vague.  What we really are looking at is that a given directory has a couple of statae to track:

*  directory shown
*  directory contents shown

In effort to avoid recursive algorithms, which could be costly in memory, we can potentially keep track of arbitrarily many directories' statae in one or two stacks.  One stack may be sufficient:  a stack to hold file tree hash entries of directories shown, whose contents are not yet shown.  This will likely work -- be algorithmically correct -- if our code in routine build_tree() always returns directories in their hierarchical order, an order like that produced by calling the `ls` command to list files recursively.  - TMH


ALGORITHM THOUGHTS:

When we look for parent directory changes, we can use two variables called 'previous_parent_entry' and 'present_parent_entry'.  We can prime both these variables to the starting value of the first-in-hash entry's parent directory value.


  To show directories first, we need to be at a file tree hash entry of a dir, whose parent directory has not changed from the prior entry's value of parent dir.  We note the key name of this dir's hash entry.  We search the remaining hash entries for files with this dir as their parent dir.

For example, we encounter directory dir-a at hash entry 1.  We make a note that dir-a is shown -- where here "shown" means placed in a serialized list which is easy to show as a tree -- but that its contents are not yet fully shown.

We then look entry by entry and find all files (in this example three files) with this dir as their parent.  The first file is another directory.  We add this to the stack of directories which are shown but whose contents are not shown.  We now look for files whose parent directory is this latest dir added to the "dir and not content shown" stack.


Note:  our "dir shown" stack is a PHP hash, whose keys are numeric and point to the file tree hash entry at which our algorithm is pointed when a further subdir is found.  So when we find dir-a-1 we note its hash entry in the latest "dir shown" hash entry, then we add the latest found dir to that hash.


In this example directory dir-a-1 is at hash entry 6.  We look for files which this entry as their parent dir.  We look for all files with entry 6 as parent dir and find three files, last of these another dir at hash entry 14.  We push this directory's hash entry / key onto the stack of "dir and not content shown" stack.  We look for all files whose parent is stored at hash entry 14.  

This time we find only regular non-directory type files.  We add these to the serialized string or hash of strings which represent the viewable tree, file by file and roughly one file to a line.  After adding all these regular files we pop the latest directory off the stack of "dir and not content shown", because we're also adding the group of regular non-dir files to the serialized string representing the file tree in a web browsable way.  But we also need to mark the directory as shown or fully shown somewhere, such as in the hash tree itself, so that we don't push that directory onto our directories stack a second time . . .

Finishing dir processing and removing a dir entry from our "dir shown" stack highlights an important step in our algorithm:  check if there's something to process on our dir stack and when so process it.  We've already noted when our algorithm adds to the stack, and we just noted when our algorithm removes an item from the stack.  This description should give us now a good point from which to outline the algorithm in a more succint step-wise fashion":









# --- EOF ---
